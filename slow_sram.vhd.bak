-- Copyright (C) 1991-2010 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- PROGRAM		"Quartus II"
-- VERSION		"Version 9.1 Build 350 03/24/2010 Service Pack 2 SJ Web Edition"
-- CREATED		"Mon Apr 13 12:24:48 2020"

LIBRARY ieee;
USE ieee.std_logic_1164.all; 

LIBRARY work;

ENTITY sram IS 
	PORT
	(
		IO_WRITE :  IN  STD_LOGIC;
		SRAM_ADLOW_EN :  IN  STD_LOGIC;
		SRAM_ADHI_EN :  IN  STD_LOGIC;
		SRAM_DATA_EN :  IN  STD_LOGIC;
		SRAM_CTRL_EN :  IN  STD_LOGIC;
		clk :  IN  STD_LOGIC;
		reset :  IN  STD_LOGIC;
		IO_DATA :  INOUT  STD_LOGIC_VECTOR(15 DOWNTO 0);
		SRAM_DQ :  INOUT  STD_LOGIC_VECTOR(15 DOWNTO 0);
		SRAM_CE_N :  OUT  STD_LOGIC;
		SRAM_WE_N :  OUT  STD_LOGIC;
		SRAM_OE_N :  OUT  STD_LOGIC;
		SRAM_UB_N :  OUT  STD_LOGIC;
		SRAM_LB_N :  OUT  STD_LOGIC;
		SRAM_ADDR :  OUT  STD_LOGIC_VECTOR(17 DOWNTO 0)
	);
END sram;

ARCHITECTURE bdf_type OF sram IS 

COMPONENT lpm_bustri_oe0
	PORT(enabledt : IN STD_LOGIC;
		 data : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
		 tridata : INOUT STD_LOGIC_VECTOR(15 DOWNTO 0)
	);
END COMPONENT;

COMPONENT lpm_ff0
	PORT(clock : IN STD_LOGIC;
		 data : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
		 q : OUT STD_LOGIC_VECTOR(15 DOWNTO 0)
	);
END COMPONENT;

COMPONENT lpm_ff1
	PORT(clock : IN STD_LOGIC;
		 data : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
		 q : OUT STD_LOGIC_VECTOR(1 DOWNTO 0)
	);
END COMPONENT;

SIGNAL	SRAM_ADDR_ALTERA_SYNTHESIZED :  STD_LOGIC_VECTOR(17 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_0 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_1 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_2 :  STD_LOGIC_VECTOR(15 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_3 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_4 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_5 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_6 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_7 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_10 :  STD_LOGIC;


BEGIN 
SRAM_CE_N <= '0';
SRAM_UB_N <= '0';
SRAM_LB_N <= '0';



SYNTHESIZED_WIRE_4 <= NOT(IO_WRITE);



b2v_inst1 : sram_ctrl
PORT MAP(clk => clk,
		 reset => reset,
		 mem => SYNTHESIZED_WIRE_0,
		 rw => IO_WRITE,
		 ready => SYNTHESIZED_WIRE_0,
		 we_n => SRAM_WE_N,
		 oe_n => SRAM_OE_N,
		 tri_n => SYNTHESIZED_WIRE_1);



b2v_inst61 : lpm_bustri_oe0
PORT MAP(enabledt => SYNTHESIZED_WIRE_1,
		 data => SYNTHESIZED_WIRE_2,
		 tridata => SRAM_DQ);


b2v_inst65 : lpm_bustri_oe0
PORT MAP(enabledt => SYNTHESIZED_WIRE_3,
		 data => SRAM_DQ,
		 tridata => IO_DATA);


SYNTHESIZED_WIRE_7 <= IO_WRITE AND SRAM_ADHI_EN;


SYNTHESIZED_WIRE_5 <= IO_WRITE AND SRAM_ADLOW_EN;


SYNTHESIZED_WIRE_3 <= SYNTHESIZED_WIRE_4 AND SRAM_DATA_EN;


SYNTHESIZED_WIRE_6 <= SRAM_DATA_EN AND IO_WRITE;


b2v_inst79 : lpm_ff0
PORT MAP(clock => SYNTHESIZED_WIRE_5,
		 data => IO_DATA,
		 q => SRAM_ADDR_ALTERA_SYNTHESIZED(15 DOWNTO 0));


b2v_inst80 : lpm_ff0
PORT MAP(clock => SYNTHESIZED_WIRE_6,
		 data => IO_DATA,
		 q => SYNTHESIZED_WIRE_2);


b2v_inst81 : lpm_ff1
PORT MAP(clock => SYNTHESIZED_WIRE_7,
		 data => IO_DATA(1 DOWNTO 0),
		 q => SRAM_ADDR_ALTERA_SYNTHESIZED(17 DOWNTO 16));

SRAM_ADDR_ALTERA_SYNTHESIZED;

type state_type is (idle, r1, r2, w1, w2);
signal state_reg, state_next: state_type;
signal data_reg, data_next:std_logic_vector(7 downto 0);
signal addr_reg, addr_next:std_logic_vector(18 downto 0);
signal we_buf, oe_buf, tri_buf: std_logic;
signal we_reg, oe_reg, tri_reg: std_logic;
begin
	process(clk, reset)
		begin
		if (reset = ’1’) then
			state_reg <= idle;
			addr_reg <= (others => ’0’);
			data_reg <= (others => ’0’);
			tri_reg <= ’1’;
			we_reg <= ’1’;
			oe_reg <= ’1’;
		elsif (clk’event and clk = ’1’) then
			state_reg <= state_next;
			addr_reg <= addr_next;
			data_reg <= data_next;
			tri_reg <= tri_buf;
			we_reg <= we_buf;
			oe_reg <= oe_buf;
end if;
end process;

END bdf_type;